The XMLHttpRequest (XHR) object is a built-in JavaScript object used to interact with servers in web applications. It allows you to send and receive data asynchronously, which is a key feature in AJAX (Asynchronous JavaScript and XML) for creating dynamic web pages.

Hereâ€™s a step-by-step overview of how XMLHttpRequest is used in an AJAX operation:

Create an Instance:
Create an instance of the XMLHttpRequest object.

Configure the Request:
Set up the request method (GET, POST, etc.), URL, and other options like asynchronous mode.

Define a Callback:
Specify a callback function that will be executed when the server responds. This function is usually assigned to the onreadystatechange property.

Send the Request:
Send the request to the server, optionally with data if using methods like POST.

Handle the Response:
In the callback function, handle the server's response and update the web page as needed.

// Create a new XMLHttpRequest object
const xhr = new XMLHttpRequest();

// Define the type of request (GET), the URL, and whether the request is asynchronous
xhr.open('GET', 'https://api.example.com/data', true);

// Set up a function to handle the response
xhr.onreadystatechange = function () {
  // Check if the request is complete (readyState 4) and was successful (status 200)
  if (xhr.readyState === 4 && xhr.status === 200) {
    // Parse the response text (assume JSON format)
    const data = JSON.parse(xhr.responseText);
    
    // Process the data (e.g., update the UI)
    console.log(data);
  }
};

// Send the request to the server
xhr.send();
